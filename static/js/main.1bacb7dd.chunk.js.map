{"version":3,"sources":["components/Loading/Loading.js","components/Trello.js","trello/repository.js","components/charts/TimeToMarket.js","App.js","serviceWorker.js","index.js","components/Loading/loading.module.css"],"names":["Loading","className","style","loading","t","window","Trello","props","state","data","this","fetch","then","setState","children","React","Component","fetchCards","doneColumns","Promise","all","map","column","get","id","fetchChangeListActions","cards","card","filter","filterDone","items","item","name","indexOf","mergeFromDifferentLists","cardsByList","reduce","total","currentList","extractStartEndDate","cardsActions","cardActions","dates","currentAction","listAfter","listBefore","completedAt","date","startedAt","daysDiff","createdAt","createdAtDate","Date","getTime","calculateTimeToMarket","timeToMarket","sortByCompletedAt","sort","a","b","d1","d2","repository","getTimeToMarket","process","fields","TimeToMarket","lineChartData","console","log","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1bacb7dd.chunk.js","sourcesContent":["import React from 'react'\nimport style from './loading.module.css'\n\nfunction Loading() {\n  return <div className={style.loading} />\n}\n\nexport default Loading;\n","import React from 'react'\nimport Loading from 'components/Loading/Loading';\n\nconst t = window.Trello;\n\nclass Trello extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: null,\n      loading: true,\n    }\n  }\n\n  componentDidMount() {\n\n    if (!this.props.fetch) {\n      this.setState({data: null, loading: false})\n      return\n    }\n\n    this.props\n      .fetch(t)\n      .then(data => {\n        this.setState({data, loading: false})\n      })\n\n  }\n\n  render() {\n    const {data, loading} = this.state;\n    const {children} = this.props;\n\n    return <div>\n      {loading && <Loading/>}\n      {!loading && children(t, data)}\n    </div>\n  }\n\n}\n\nexport default Trello;\n","import map from 'lodash/map'\n\nconst fetchCards = t => doneColumns => Promise.all(doneColumns.map(column => t.get(`list/${column.id}/cards`)));\nconst fetchChangeListActions = t => cards => Promise.all(cards.map(card => t.get(`/cards/${card.id}/actions`, {filter: 'updateCard:idList'})));\n\nexport const filterDone = items => items.filter(item => item.name.indexOf('Done') === 0)\nexport const mergeFromDifferentLists = cardsByList => cardsByList.reduce((total, currentList) => [...total, ...currentList], []);\nexport const extractStartEndDate = cardsActions => cardsActions.map(cardActions => {\n  return cardActions.reduce((dates, currentAction) => {\n    if (currentAction.data.listAfter.name.indexOf('Done') === 0 && currentAction.data.listBefore.name.indexOf('Doing') === 0) {\n      dates.completedAt = currentAction.date\n    }\n    if (currentAction.data.listAfter.name.indexOf('To do') === 0 ) {\n      dates.startedAt = currentAction.date\n    }\n\n    dates.id = currentAction.data.card.id\n    return dates\n  }, {})\n})\n\nconst daysDiff = (createdAt, completedAt) => {\n  const MICROSECONDS_IN_ONE_DAY = 1000 * 3600 * 24;\n  const createdAtDate = new Date(createdAt)\n  const completedAtDate = new Date(completedAt)\n\n  return (completedAtDate.getTime() - createdAtDate.getTime()) / MICROSECONDS_IN_ONE_DAY\n}\n\nexport const calculateTimeToMarket = cards => map(cards, dates => ({\n  ...dates,\n  timeToMarket: daysDiff(dates.startedAt, dates.completedAt)\n}))\n\nexport const sortByCompletedAt = cards => cards.sort((a, b) => {\n    const d1 = new Date(a.completedAt)\n    const d2 = new Date(b.completedAt)\n    return d1.getTime() - d2.getTime()\n  })\n\nfunction repository(t) {\n  const getTimeToMarket = () =>\n    t.get(`boards/${process.env.REACT_APP_BOARD}/lists`, {fields: ['id', 'name']})\n      .then(filterDone)\n      .then(fetchCards(t))\n      .then(mergeFromDifferentLists)\n      .then(fetchChangeListActions(t))\n      .then(extractStartEndDate)\n      .then(calculateTimeToMarket)\n      .then(sortByCompletedAt)\n  return {\n    getTimeToMarket\n  }\n}\n\nexport default repository\n\n","import React from 'react'\nimport {Line} from 'react-chartjs-2'\nimport {sortByCompletedAt} from \"../../trello/repository\";\n\nconst cardNames = (t, cards) => {\n  return Promise\n    .all(cards.map(card => t.get(`cards/${card.id}`, {fields: 'name'})))\n}\n\nconst t = window.Trello;\n\nclass TimeToMarket extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      lineChartData: {},\n    }\n  }\n\n  componentDidMount() {\n    cardNames(t, this.props.data)\n      .then(cards => {\n        console.log(cards.map(card => card.name))\n          this.setState({\n            lineChartData: {\n              labels: cards.map(card => card.name),\n              datasets: [\n                {\n                  label: 'This must be the product Time To Market',\n                  fill: false,\n                  lineTension: 0.1,\n                  backgroundColor: 'rgba(75,192,192,0.4)',\n                  borderColor: 'rgba(75,192,192,1)',\n                  borderCapStyle: 'butt',\n                  borderDash: [],\n                  borderDashOffset: 0.0,\n                  borderJoinStyle: 'miter',\n                  pointBorderColor: 'rgba(75,192,192,1)',\n                  pointBackgroundColor: '#fff',\n                  pointBorderWidth: 1,\n                  pointHoverRadius: 5,\n                  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                  pointHoverBorderColor: 'rgba(220,220,220,1)',\n                  pointHoverBorderWidth: 2,\n                  pointRadius: 1,\n                  pointHitRadius: 10,\n                  data: this.props.data.map(card => card.timeToMarket)\n                }\n              ]\n            }\n          })\n        }\n      )\n  }\n\n  render() {\n    const {lineChartData} = this.state\n    return <Line data={lineChartData}/>\n  }\n}\n\nexport default TimeToMarket\n","import React from 'react';\nimport './App.css';\nimport Trello from 'components/Trello';\nimport repository from \"trello/repository\";\nimport TimeToMarket from \"./components/charts/TimeToMarket\";\n\nfunction App() {\n\n  return <main>\n    <Trello fetch={t => repository(t).getTimeToMarket()}>\n      {(t, data) => <TimeToMarket data={data}/>}\n    </Trello>\n  </main>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_loading__3nYZo\",\"spin\":\"loading_spin__3foJh\"};"],"sourceRoot":""}